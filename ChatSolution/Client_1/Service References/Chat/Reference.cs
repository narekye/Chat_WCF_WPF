//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client_1.Chat {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/ChatLibrary")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Chat.IChat")]
    public interface IChat {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChat/GetData", ReplyAction="http://tempuri.org/IChat/GetDataResponse")]
        string GetData(string name, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChat/GetData", ReplyAction="http://tempuri.org/IChat/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(string name, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChat/Register", ReplyAction="http://tempuri.org/IChat/RegisterResponse")]
        bool Register(Client_1.Chat.User value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChat/Register", ReplyAction="http://tempuri.org/IChat/RegisterResponse")]
        System.Threading.Tasks.Task<bool> RegisterAsync(Client_1.Chat.User value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChat/GetAllMembers", ReplyAction="http://tempuri.org/IChat/GetAllMembersResponse")]
        Client_1.Chat.User[] GetAllMembers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChat/GetAllMembers", ReplyAction="http://tempuri.org/IChat/GetAllMembersResponse")]
        System.Threading.Tasks.Task<Client_1.Chat.User[]> GetAllMembersAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatChannel : Client_1.Chat.IChat, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChatClient : System.ServiceModel.ClientBase<Client_1.Chat.IChat>, Client_1.Chat.IChat {
        
        public ChatClient() {
        }
        
        public ChatClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ChatClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ChatClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ChatClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetData(string name, string message) {
            return base.Channel.GetData(name, message);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(string name, string message) {
            return base.Channel.GetDataAsync(name, message);
        }
        
        public bool Register(Client_1.Chat.User value) {
            return base.Channel.Register(value);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterAsync(Client_1.Chat.User value) {
            return base.Channel.RegisterAsync(value);
        }
        
        public Client_1.Chat.User[] GetAllMembers() {
            return base.Channel.GetAllMembers();
        }
        
        public System.Threading.Tasks.Task<Client_1.Chat.User[]> GetAllMembersAsync() {
            return base.Channel.GetAllMembersAsync();
        }
    }
}
